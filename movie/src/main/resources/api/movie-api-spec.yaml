openapi: 3.0.3
info:
  title: Movie API
  description: "API contract of the movie API"
  version: "1.0.0"
paths:
  /movie:
    post:
      operationId: createMovie
      tags:
        - movie
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BasicMovieDto'

      responses:
        '200':
          description: Successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommonResponse'
        '400':
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommonResponse'
        '500':
          description: Internal server error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommonResponse'

  /movie/{movieId}:
    get:
      operationId: viewMovieById
      tags:
        - movie
      parameters:
        - name: movieId
          in: path
          required: true
          description: The id of the movie to retrieve
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExtendedMovieDto'
        '400':
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommonResponse'
        '500':
          description: Internal server error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommonResponse'
  /rate/{movieId}/{userId}:
    post:
      operationId: createRating
      tags:
        - rate
      parameters:
        - name: movieId
          in: path
          required: true
          description: The id of the movie to rate
          schema:
            type: string
            format: uuid
        - name: userId
          in: path
          required: true
          description: The id of the user who given the rating
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RateDto'

      responses:
        '200':
          description: Successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommonResponse'
        '400':
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommonResponse'
        '500':
          description: Internal server error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommonResponse'
  /profile/{userId}:
    get:
      operationId: viewProfile
      tags:
        - profile
      parameters:
        - name: userId
          in: path
          required: true
          description: The id of the user who given the ratings
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfileDto'
        '400':
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommonResponse'
        '500':
          description: Internal server error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommonResponse'
  /user:
    post:
      operationId: createUser
      tags:
        - user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserDto'

      responses:
        '200':
          description: Successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommonResponse'
        '400':
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommonResponse'
        '500':
          description: Internal server error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommonResponse'
  /user/{userId}:
    get:
      operationId: viewUserById
      tags:
        - user
      parameters:
        - name: userId
          in: path
          required: true
          description: The id of the user to retrieve
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExtendedUserDto'
        '400':
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommonResponse'
        '500':
          description: Internal server error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommonResponse'

components:
  schemas:
    UserDto:
      type: object
      properties:
        userName:
          type: string
          description: "user ID of the user"
          minLength: 2
          maxLength: 30
        firstName:
          type: string
          description: "first name of the user"
          minLength: 2
          maxLength: 100
        lastName:
          type: string
          description: "last name of the user"
          minLength: 2
          maxLength: 100
        email:
          type: string
          format: email
          description: "email address"
          minLength: 3
          maxLength: 150
        address:
          type: string
          description: "residence address"
          minLength: 10
          maxLength: 255
      required:
        - userId
        - firstName
        - lastName
        - email
        - address

    ExtendedUserDto:
      allOf:
        - $ref: "#/components/schemas/UserDto"
        - type: object
          properties:
            id:
              type: string
              description: "id of the user"
              format: uuid
          required:
            - id

    BasicMovieDto:
      type: object
      properties:
        title:
          type: string
          description: "title of the movie"
          minLength: 2
          maxLength: 255
        description:
          type: string
          description: "a short description of the movie"
          minLength: 10
          maxLength: 500
        producer:
          type: string
          description: "name of the producer"
          minLength: 3
          maxLength: 255
        language:
          type: string
          description: "language of the movie"
          minLength: 3
          maxLength: 255
        durationInMinutes:
          type: integer
          description: "length of the movie in minutes"
          maximum: 999
          minimum: 1
      required:
        - title
        - description
        - producer
        - language
        - durationInMinutes

    ExtendedMovieDto:
      allOf:
        - $ref: "#/components/schemas/BasicMovieDto"
        - type: object
          properties:
            id:
              type: string
              description: "id of the movie"
            overallRating:
              type: number
              description: "overall rating"
            totalRatings:
              type: integer
              description: "total number of ratings"
          required:
            - id
            - overallRating
            - totalRatings

    UserRatedMovieDto:
      allOf:
        - $ref: "#/components/schemas/BasicMovieDto"
        - type: object
          properties:
            id:
              type: string
              description: "id of the movie"
            userRating:
              type: integer
              description: "the rating given by the user"
            overallRating:
              type: number
              description: "overall rating"
            totalRatings:
              type: integer
              description: "total number of ratings"
          required:
            - id
            - userRating
            - overallRating
            - totalRatings

    UserProfileDto:
      type: object
      description: "profile data of the user"
      properties:
        ratedMovies:
          type: array
          items:
            $ref: '#/components/schemas/UserRatedMovieDto'
        userDetail:
          $ref: "#/components/schemas/ExtendedUserDto"

    RateDto:
      type: object
      properties:
        ratingValue:
          type: integer
          description: "given rating value for the movie"
          minLength: 1
          maxLength: 10
        comment:
          type: string
          description: "a short comment"
          minLength: 0
          maxLength: 500
      required:
        - ratingValue

    CommonResponse:
      type: object
      properties:
        message:
          type: string
        id:
          type: string

